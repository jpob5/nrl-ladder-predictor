{"version":3,"sources":["components/Teams.js","components/Ladder.js","components/Draw.js","components/Results.js","components/Record.js","components/Live.js","App.js","serviceWorker.js","index.js"],"names":["eagles","eels","ladder","draw","realResults","originalTeams","Storm","name","top8","top4","highest","lowest","average","averagePoints","Roosters","Raiders","Rabbitohs","Eels","Broncos","Sharks","Tigers","Panthers","Knights","Warriors","Cowboys","Dragons","Bulldogs","Titans","Live","props","currentIterations","iterations","loopTime","ladderType","loop","state","speed","record","$","extend","this","setInterval","calculatePercentage","clearInterval","newLadder","j","length","x","map","arr","slice","i","winNum","Math","floor","random","winner","loser","winningAmount","points","sort","compareSecondColumn","calculateSeasonResults","setState","currentLadder","recordAsArray","Object","entries","compareTop8Column","team","index","percentage","safePercentage","isNaN","top4Percentage","top4SafePercentage","push","key","toFixed","a","b","Container","Row","Col","xs","md","className","role","id","htmlFor","type","onChange","e","changeSpeed","checked","printLadder","React","Component","App","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5df82f61.chunk.js","sourcesContent":["const storm = 'Storm';\r\nconst roosters = 'Roosters';\r\nconst raiders = 'Raiders';\r\nconst rabbitohs = 'Rabbitohs';\r\nconst eagles = 'Sea Eagles';\r\nconst eels = 'Eels';\r\nconst broncos = 'Broncos';\r\nconst sharks = 'Sharks';\r\nconst tigers = 'Tigers';\r\nconst panthers = 'Panthers';\r\nconst knights = 'Knights';\r\nconst warriors = 'Warriors';\r\nconst cowboys = 'Cowboys';\r\nconst dragons = 'Dragons';\r\nconst bulldogs = 'Bulldogs';\r\nconst titans = 'Titans';\r\n\r\nexport {\r\n    storm,\r\n    roosters,\r\n    raiders,\r\n    rabbitohs,\r\n    eagles,\r\n    eels,\r\n    broncos,\r\n    sharks,\r\n    tigers,\r\n    panthers,\r\n    knights,\r\n    warriors,\r\n    cowboys,\r\n    dragons,\r\n    bulldogs,\r\n    titans\r\n}","import { storm, roosters, raiders, rabbitohs, eagles, eels, broncos, sharks, tigers, panthers, knights, warriors, cowboys, dragons, bulldogs, titans } from './Teams';\r\n\r\nconst ladder = [[storm, 36, 281],\r\n[roosters, 30, 196],\r\n[raiders, 28, 153],\r\n[rabbitohs, 28, 83],\r\n[eagles, 26, 72],\r\n[eels, 26, 27],\r\n[panthers, 22, -63],\r\n[broncos, 21, -52],\r\n[sharks, 20, 2],\r\n[tigers, 20, -44],\r\n[warriors, 19, -62],\r\n[knights, 18, -21],\r\n[cowboys, 16, -99],\r\n[dragons, 16, -100],\r\n[bulldogs, 16, -174],\r\n[titans, 10, -199]];\r\n\r\nexport default ladder;","import { storm, roosters, raiders, rabbitohs, eagles, eels, broncos, sharks, tigers, panthers, knights, warriors, cowboys, dragons, bulldogs, titans } from './Teams';\r\n\r\nconst draw = [\r\n    //Week22\r\n    [eagles, tigers],\r\n    [titans, eels],\r\n    [broncos, panthers],\r\n    [knights, cowboys],\r\n    [storm, raiders],\r\n    [rabbitohs, bulldogs],\r\n    [roosters, warriors],\r\n    [sharks, dragons],\r\n    //week23\r\n    [eels, bulldogs],\r\n    [cowboys, panthers],\r\n    [broncos, rabbitohs],\r\n    [sharks, warriors],\r\n    [tigers, knights],\r\n    [dragons, roosters],\r\n    [storm, titans],\r\n    [raiders, eagles],\r\n    //week24\r\n    [cowboys, bulldogs],\r\n    [warriors, rabbitohs],\r\n    [broncos, eels],\r\n    [knights, titans],\r\n    [eagles, storm],\r\n    [roosters, panthers],\r\n    [sharks, raiders],\r\n    [dragons, tigers],\r\n    //week25\r\n    [rabbitohs, roosters],\r\n    [eels, eagles],\r\n    [storm, cowboys],\r\n    [raiders, warriors],\r\n    [bulldogs, broncos],\r\n    [titans, dragons],\r\n    [tigers, sharks],\r\n    [panthers, knights]];\r\n\r\nexport default draw;","const realResults = [10, 2, 6, 12, 6, 8, 4, 8, 52, 15, 8, 24, 36, 34, 24, 12, 8, 1, 22, 2, 4, 2, 2, 12, 20, 12, 8, 38, 22, 1, 22, 22, 12, 3, 24, 0, 1, 6, 22, 2, 4, 8, 2, 2, 1, 6, 14, 18, 2, 8, 5, 26, 20, 28, 1, 30, 1, 4, 2, 24, 9, 8, 2, 20, 22, 28, 8, 2, 2, 12, 3, 13, 22, 16, 6, 6, 26, 18, 6, 10, 33, 4, 7, 6, 5, 20, 2, 16, 6, 54, 8, 12, 16, 26, 8];\r\n\r\nexport default realResults;","import { storm, roosters, raiders, rabbitohs, eagles, eels, broncos, sharks, tigers, panthers, knights, warriors, cowboys, dragons, bulldogs, titans } from './Teams';\r\n\r\nlet teams = {\r\n    Storm: {\r\n        name: storm,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Roosters: {\r\n        name: roosters,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Raiders: {\r\n        name: raiders,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Rabbitohs: {\r\n        name: rabbitohs,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Eagles: {\r\n        name: eagles,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Eels: {\r\n        name: eels,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Broncos: {\r\n        name: broncos,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Sharks: {\r\n        name: sharks,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Tigers: {\r\n        name: tigers,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Panthers: {\r\n        name: panthers,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Knights: {\r\n        name: knights,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Warriors: {\r\n        name: warriors,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Cowboys: {\r\n        name: cowboys,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Dragons: {\r\n        name: dragons,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Bulldogs: {\r\n        name: bulldogs,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Titans: {\r\n        name: titans,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    }\r\n}\r\nconst originalTeams = {\r\n    Storm: {\r\n        name: storm,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Roosters: {\r\n        name: roosters,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Raiders: {\r\n        name: raiders,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Rabbitohs: {\r\n        name: rabbitohs,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    'Sea Eagles': {\r\n        name: eagles,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Eels: {\r\n        name: eels,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Broncos: {\r\n        name: broncos,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Sharks: {\r\n        name: sharks,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Tigers: {\r\n        name: tigers,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Panthers: {\r\n        name: panthers,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Knights: {\r\n        name: knights,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Warriors: {\r\n        name: warriors,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Cowboys: {\r\n        name: cowboys,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Dragons: {\r\n        name: dragons,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Bulldogs: {\r\n        name: bulldogs,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    },\r\n    Titans: {\r\n        name: titans,\r\n        top8: 0,\r\n        top4: 0,\r\n        highest: 0,\r\n        lowest: 0,\r\n        average: 0,\r\n        averagePoints: 0\r\n    }\r\n}\r\n\r\nexport {\r\n    teams,\r\n    originalTeams\r\n}","import React from 'react';\r\nimport { Container, Col, Row } from 'reactstrap';\r\nimport $ from 'jquery';\r\n//import { storm, roosters, raiders, rabbitohs, eagles, eels, broncos, sharks, tigers, panthers, knights, warriors, cowboys, dragons, bulldogs, titans } from './Teams';\r\nimport { log } from './Helpers';\r\nimport ladder from './Ladder';\r\nimport draw from './Draw';\r\nimport realResults from './Results';\r\nimport { originalTeams } from './Record';\r\n\r\n\r\nclass Live extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.ladder = ladder;\r\n        this.currentIterations = 0;\r\n        this.iterations = 1;\r\n\r\n        this.loopTime = 500;\r\n\r\n        this.ladderType = 'dynamic';\r\n\r\n        this.loop = null;\r\n        this.state = {\r\n            currentIterations: 0,\r\n            speed: 'slow'\r\n        }\r\n\r\n        this.record = $.extend(true, {}, originalTeams);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loop = setInterval(() => {\r\n            this.calculatePercentage()\r\n        }, this.loopTime);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.loop);\r\n    }\r\n\r\n    calculateSeasonResults(newLadder) {\r\n        for (let j = 0; j < newLadder.length; j++) {\r\n            let name = newLadder[j][0];\r\n            if (j < (8)) {\r\n                this.record[name].top8++;\r\n            } else if (newLadder[j][1] === newLadder[8 - 1][1] && this.ladderType === 'basic') {\r\n                this.record[name].top8++;\r\n            }\r\n            if (j < (4)) {\r\n                this.record[name].top4++;\r\n            } else if (newLadder[j][1] === newLadder[4 - 1][1] && this.ladderType === 'basic') {\r\n                this.record[name].top4++;\r\n            }\r\n            if (this.record[name].lowest === 0 || this.record[name].lowest < (j + 1)) {\r\n                this.record[name].lowest = j + 1;\r\n            }\r\n            if (this.record[name].highest === 0 || this.record[name].highest > (j + 1)) {\r\n                this.record[name].highest = j + 1;\r\n            }\r\n            this.record[name].average = ((this.record[name].average * (this.currentIterations - 1)) + (j + 1)) / this.currentIterations;\r\n            this.record[name].averagePoints = ((this.record[name].averagePoints * (this.currentIterations - 1)) + newLadder[j][1]) / this.currentIterations;\r\n        }\r\n    }\r\n\r\n    calculatePercentage() {\r\n        for (let x = 0; x < this.iterations; x++) {\r\n            this.currentIterations++;\r\n            var newLadder = ladder.map(function (arr) {\r\n                return arr.slice();\r\n            });\r\n            for (let i = 0; i < draw.length; i++) {\r\n                const winNum = Math.floor(Math.random() * 2);\r\n                const winner = winNum === 1 ? draw[i][1] : draw[i][0];\r\n                const loser = winNum === 1 ? draw[i][0] : draw[i][1];\r\n                const winningAmount = realResults[Math.floor(Math.random() * realResults.length)];\r\n                let points = 2;\r\n                if (winningAmount === 0) {\r\n                    points = 1;\r\n                }\r\n                for (let j = 0; j < newLadder.length; j++) {\r\n                    if (newLadder[j][0] === winner) {\r\n                        newLadder[j][1] += points;\r\n                        if (this.ladderType === 'dynamic') {\r\n                            newLadder[j][2] += winningAmount;\r\n                        }\r\n                    }\r\n                    if (newLadder[j][0] === loser) {\r\n                        if (points === 0) {\r\n                            newLadder[j][1] += points;\r\n                        }\r\n                        if (this.ladderType === 'dynamic') {\r\n                            newLadder[j][2] -= winningAmount;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            newLadder.sort(this.compareSecondColumn);\r\n            this.calculateSeasonResults(newLadder);\r\n        }\r\n        this.setState({});\r\n    }\r\n\r\n    printLadder() {\r\n        let currentLadder = [];\r\n        const recordAsArray = Object.entries(this.record);\r\n        recordAsArray.sort(this.compareTop8Column);\r\n        recordAsArray.map((team, index) => {\r\n            const percentage = (Math.floor((recordAsArray[index][1].top8 / this.currentIterations) * 10000) / 100);\r\n            const safePercentage = isNaN(percentage) ? 0 : percentage;\r\n            const top4Percentage = (Math.floor((recordAsArray[index][1].top4 / this.currentIterations) * 10000) / 100);\r\n            const top4SafePercentage = isNaN(top4Percentage) ? 0 : top4Percentage;\r\n            currentLadder.push(\r\n                <tr key={index}>\r\n                    <td>{(index + 1)}</td>\r\n                    <td>{team[1].name}</td>\r\n                    <td>{safePercentage.toFixed(2)}</td>\r\n                    <td>{top4SafePercentage.toFixed(2)}</td>\r\n                    <td>{team[1].highest}</td>\r\n                    <td>{team[1].lowest}</td>\r\n                    <td>{team[1].average.toFixed(2)}</td>\r\n                    <td>{team[1].averagePoints.toFixed(2)}</td>\r\n                </tr>\r\n            )\r\n            return false;\r\n        });\r\n        return currentLadder;\r\n    }\r\n\r\n    compareSecondColumn(a, b) {\r\n        if (a[1] === b[1]) {\r\n            return (a[2] > b[2]) ? -1 : 1;\r\n        }\r\n        else {\r\n            return (a[1] > b[1]) ? -1 : 1;\r\n        }\r\n    }\r\n\r\n    compareTop8Column(a, b) {\r\n        if (a[1].average === b[1].average) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return (a[1].average < b[1].average) ? -1 : 1;\r\n        }\r\n    }\r\n\r\n    changeSpeed(speed) {\r\n        this.setState({\r\n            speed: speed\r\n        });\r\n        if (speed === 'slow') {\r\n            this.loopTime = 500;\r\n            this.iterations = 1;\r\n        } else if (speed === 'medium') {\r\n            this.loopTime = 200;\r\n            this.iterations = 1;\r\n        } else if (speed === 'fast') {\r\n            this.loopTime = 50;\r\n            this.iterations = 100;\r\n        }\r\n        clearInterval(this.loop);\r\n        this.loop = setInterval(() => {\r\n            this.calculatePercentage()\r\n        }, this.loopTime);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <h1>NRL Ladder Predictor</h1>\r\n                <Container>\r\n                    <Row>\r\n                        <Col xs=\"12\" md=\"3\">\r\n\r\n                            <div className=\"controls\" role=\"radiogroup\">\r\n                                <div>Simulations: {this.currentIterations} </div>\r\n                                <div id=\"loop-speed\">Speed:</div>\r\n                                <div>\r\n                                    <label className=\"radio-container\" htmlFor=\"slow\">\r\n                                        <input id=\"slow\"\r\n                                            name=\"speed\"\r\n                                            type=\"radio\"\r\n                                            onChange={(e) => { this.changeSpeed('slow') }}\r\n                                            checked={this.state.speed === 'slow' ? 'checked' : ''} /> Slow\r\n                                    </label>\r\n                                </div>\r\n                                <div>\r\n                                    <label className=\"radio-container\" htmlFor=\"medium\">\r\n                                        <input id=\"medium\"\r\n                                            name=\"speed\"\r\n                                            type=\"radio\"\r\n                                            onChange={(e) => { this.changeSpeed('medium') }}\r\n                                            checked={this.state.speed === 'medium' ? 'checked' : ''} /> Medium\r\n                                    </label>\r\n                                </div>\r\n                                <div>\r\n                                    <label className=\"radio-container\" htmlFor=\"fast\">\r\n                                        <input id=\"fast\"\r\n                                            name=\"speed\"\r\n                                            type=\"radio\"\r\n                                            onChange={(e) => { this.changeSpeed('fast') }}\r\n                                            checked={this.state.speed === 'fast' ? 'checked' : ''} /> Fast\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                        </Col>\r\n                        <Col xs=\"12\" md=\"9\">\r\n                            <div className=\"ladder\">\r\n                                <table>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <th>Pos.</th>\r\n                                            <th>Team</th>\r\n                                            <th>Top 8 %</th>\r\n                                            <th>Top 4 %</th>\r\n                                            <th>Highest</th>\r\n                                            <th>Lowest</th>\r\n                                            <th>Average</th>\r\n                                            <th>Points</th>\r\n                                        </tr>\r\n                                        {this.printLadder()}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Live;","import React from 'react';\r\nimport Live from './components/Live'\r\nimport './styles/styles.scss';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<link href=\"https://fonts.googleapis.com/css?family=Oxygen&display=swap\" rel=\"stylesheet\"></link>\r\n\t\t\t<link href=\"https://fonts.googleapis.com/css?family=Cutive+Mono&display=swap\" rel=\"stylesheet\"></link>\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<Live />\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter as Router} from 'react-router-dom';\r\n\r\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}><App /></Router>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}